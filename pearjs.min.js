const pearjs = {}

pearjs.developmentMode = true
pearjs.drawingLogs = true
pearjs.version = "Beta 1.0.0"
pearjs.Nc = function (canvas, data) {
    if (!canvas) return console.error("A parameter is missing");
    if (typeof canvas != "string") return console.error(`${canvas} is not a string`);
    if (typeof data != "object") return console.error(`${data} is not a object`);
    if (!document.querySelector(canvas)) return console.error(`Cannot find element "${canvas}"`);
    this.c = document.querySelector(canvas)
    this.ctx = this.c.getContext("2d")
    this.c.width = data.width || 500
    this.c.height = data.height || 500

    this.drawRect = (rectData) => {
        if (!rectData) return console.error("A parameter is missing");
        if (!rectData.x && rectData.x != 0 || !rectData.y && rectData.y != 0 || !rectData.width && rectData.width != 0 || !rectData.height && rectData.height != 0 || !rectData.color) return console.error('Object values not found');
        if (typeof rectData.x != "number" || typeof rectData.y != "number" || typeof rectData.width != "number" || typeof rectData.height != "number") return console.error("data.x/y/width/height is not a number");
        if (typeof rectData.color != "string") return console.error("data.color is not a string");
        this.ctx.fillStyle = rectData.color
        this.ctx.fillRect(rectData.x, rectData.y, rectData.width, rectData.height)

        if (pearjs.developmentMode && pearjs.drawingLogs) {
            console.log("%c" + `${location.href} » A rectangle was drawn at position X: ${rectData.x} Y: ${rectData.y} with a size of ${rectData.width} x ${rectData.height} and color "${rectData.color}" ✅`, "color:" + "green")
        }
    }

    this.drawArc = (circleData) => {
        if (!circleData) return console.error("A parameter is missing");
        if (!circleData.x && circleData.x != 0 || !circleData.y && circleData.y != 0 || !circleData.radius && circleData.radius != 0 || !circleData.startAngle && circleData.startAngle != 0 || !circleData.endAngle && circleData.endAngle != 0 || !circleData.color) return console.error('Object values not found');
        if (typeof circleData.x != "number" || typeof circleData.y != "number" || typeof circleData.radius != "number" || typeof circleData.startAngle != "number" || typeof circleData.endAngle != "number") return console.error("data.x/y/radius is not a number");
        if (typeof circleData.color != "string") return console.error("data.color is not a string");
        this.ctx.fillStyle = circleData.color
        this.ctx.beginPath()
        this.ctx.arc(circleData.x, circleData.y, circleData.radius, 0, Math.PI * 2, false)
        this.ctx.fill()
        if (pearjs.developmentMode && pearjs.drawingLogs) {
            console.log("%c" + `${location.href} » A circle/arc was drawn at position X: ${circleData.x} Y: ${circleData.y} with a radius of ${circleData.radius} and color "${circleData.color}" ✅`, "color:" + "green")
        }
    }

    this.drawImage = (imageData) => {
        if (!imageData) return console.error("A parameter is missing");
        if (!imageData.src || !imageData.x && imageData.x != 0 || !imageData.y && imageData.y != 0) return console.error("Object values not found");
        if (typeof imageData.src !== "string" || typeof imageData.x !== "number" || typeof imageData.y !== "number") return console.error("src is not a string or x/y are not numbers");

        const image = new Image();
        image.src = imageData.src;

        image.onload = () => {
            if (imageData.width && imageData.height && imageData.swidth && imageData.sheight && imageData.sx && imageData.sy) {
                this.ctx.drawImage(image, imageData.sx, imageData.sy, imageData.swidth, imageData.sheight, imageData.x, imageData.y, imageData.width, imageData.height);
            } else if (imageData.width && imageData.height) {
                this.ctx.drawImage(image, imageData.x, imageData.y, imageData.width, imageData.height);
            } else {
                this.ctx.drawImage(image, imageData.x, imageData.y);
            }
            if (pearjs.developmentMode && pearjs.drawingLogs) {
                console.log("%c" + `${location.href} » An image was drawn at position X: ${imageData.x} Y: ${imageData.y} ✅`, "color: green");
            }
        };
    };

    this.drawGradient = (gradientData) => {
        if (!gradientData) return console.error("A parameter is missing");
        if (!gradientData.x && gradientData.x != 0 || !gradientData.y && gradientData.y != 0 || !gradientData.width && gradientData.width != 0 || !gradientData.height && gradientData.height != 0) return console.error('Object values not found');
        if (typeof gradientData.x != "number" || typeof gradientData.y != "number" || typeof gradientData.width != "number" || typeof gradientData.height != "number") return console.error("data.x/y/width/height is not a number");
        if (!gradientData.colors) return console.error("data.colors is not an array");
        if (gradientData.colors.length < 2) return console.error("data.colors must have at least 2 colors");
        var grad = this.ctx.createLinearGradient(gradientData.widthStartPoint, gradientData.heightStartPoint, gradientData.widthEndPoint, gradientData.heightEndPoint);

        for (let i = 0; i < gradientData.colors.length; i++) {
            if (typeof gradientData.colors[i] != "object") return console.error("data.colors must be an array of strings");
            const element = gradientData.colors[i];
            grad.addColorStop(element.offset, element.color);
        }

        this.ctx.fillStyle = grad
        this.ctx.fillRect(gradientData.x, gradientData.y, gradientData.width, gradientData.height);
        if (pearjs.developmentMode && pearjs.drawingLogs) {
            console.log("%c" + `${location.href} » A gradient was drawn at position X: ${gradientData.x} Y: ${gradientData.y} with a size of ${gradientData.width} x ${gradientData.height} and colors "${JSON.stringify(gradientData.colors)}" ✅`, "color:" + "green")
        }
    }

    this.clear = (clearData) => {
        if (clearData && typeof clearData == "object") {
            if (!clearData.x && clearData.x != 0 || !clearData.y && clearData.y != 0 || !clearData.width && clearData.width != 0 || !clearData.height && clearData.height != 0) return console.error('Object values not found');
            if (typeof clearData.x != "number" && typeof clearData.y != "number" && typeof clearData.width != "number" && typeof clearData.height != "number") return console.error("data.x/y/width/height is not a number");
            this.ctx.clearRect(clearData.x, clearData.y, clearData.width, clearData.height)
        } else {
            this.ctx.clearRect(0, 0, this.c.width, this.c.height)
        }
    }

    this.download = () => {
        var image = this.c.toDataURL()
        var link = document.createElement("a");
        link.href = image;
        link.download = location.href + ".png";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        if (pearjs.developmentMode) {
            console.log("%c" + `${location.href} » An image with the canvas content was downloaded, with the name "${location.href}" ✅`, "color:" + "green")
        }
    }

    if (pearjs.developmentMode && this.c) {
        console.log("%c" + `${location.href} » Loaded ${canvas} ✅`, "color:" + "green")
    }
}
pearjs.Setup = (canvas, data) => {
    return new pearjs.Nc(canvas, data)
}

var start = () => {
    console.log("%c" + `
    ▄▄▄▄$  ,
    y,,,▄                                       .███▓█▀▐▓▓▓▓╥
     ▀██▀▌╓╓╓╖,                              ╓    ╓╓╖╓ ▓▓▓▓╣╢╣▓▓▄
         ║[   ╙╢                             ▒L ╒▒    -▐▓▓▓╢╣╢▒╢▓▓▄
         ║[,,,╓╫  ╢╜-╙╢  "╙-"╣╕ ]▒╜-╙        ▒L  ╣╥╗╖,  ▓▓▓╣╢╢▓▓▓▓▓
         ║[---   ]▒ººº╨  ╗Ñ╝╝╣[ ]▒           ▒Γ      -▒ █▓▓▓▓▓▓▓▓▓█
         ║[       ╣╗╥╖@  ╣╦╓╓╣[ ]▒    ╔╗ ╣╦╓╗╩  ª@╥╓╓╗╩  ▀▓▓▓▓▓▓█▀
         ╙░       ¿▒^*r  j▒^-▒░ -░    ╙┘ j┘^▒;  <░┘^^▒;

    Version: ${pearjs.version} | By: elbeige / beigedev | For canvas developers
    `, "color:" + "green")
    if (!pearjs.developmentMode) return;
    console.log("%c" + "» Started ✅", "color:" + "green")
    /*console.log("%c" + "» Game Templates: " + `
           - Platformer Game /  pearjs.getTemplate('platformer')
           - RPG Game /  pearjs.getTemplate('rpg')
           - Puzzle Game /  pearjs.getTemplate('puzzle')

           - Point and Click Game / pearjs.getTemplate('pac')
    ` + `
                   - % Development mode is activated % -
            - % To disable use "pearjs.developmentMode = false" % -
                           - % In your code % -
                           
    `, "color:" + "green")*/
    console.log("%c" + "» How to set up the canvas: " + `
           - var canvas = pearjs.Setup('canvas', {width: 800, height: 450})

            - % Multiple canvas % -
           
           - var canvas1 = pearjs.Setup('#canvas1', {width: 800, height: 450})
           - var canvas2 = pearjs.Setup('#canvas2', {width: 400, height: 400})
           - var canvas3 = pearjs.Setup('#canvas3', {width: 150, height: 125})
    ` + `
                   - % Development mode is activated % -
            - % To disable use "pearjs.developmentMode = false" % -
                           - % In your code % -
    `, "color:" + "green")
}

start()
